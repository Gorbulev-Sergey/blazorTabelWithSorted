@using System.ComponentModel.DataAnnotations
@using System.Reflection

<h4>@Title</h4>

<div class="mb-3">
    <header class="d-flex align-content-center">
        @foreach (var name in items.FirstOrDefault().GetType().GetProperties())
        {
        <div class="mr-2">
            @if (name.Name == key.Key & key.Value)
            {                
                <button class="btn btn-sm btn-light text-dark" @onclick="() => orderBy(name.Name)">
                    <span class="ml-2 mr-2">@getDescription(name)</span>
                    <i class="fas fa-angle-down"></i>
                </button>
            }
            else if (name.Name == key.Key & !key.Value)
            {                
                <button class="btn btn-sm btn-light text-dark" @onclick="() => orderBy(name.Name)">
                    <span class="ml-2 mr-2">@getDescription(name)</span>
                    <i class="fas fa-angle-up"></i>
                </button>
            }
            else
            {                
                <button class="btn btn-sm btn-light text-dark" @onclick="() => orderBy(name.Name)">
                    <span class="ml-2 mr-2">@getDescription(name)</span>
                    <i class="fas fa-angle-right"></i>
                </button>
            }
        </div>
            
        }
    </header>
    <main>
        @foreach (var item in items)
        {
        <div class="d-flex bg-light text-dark rounded pl-2 pt-1 pr-2 pb-1 mt-1">
            @foreach (var property in item.GetType().GetProperties())
            {
                <div class="d-flex align-items-center mr-4">
                    <span class="badge badge-dark text-light mr-2">@getDescription(property)</span>
                    @property.GetValue(item)
                </div>
            }
        </div>
        }
    </main>
</div>

@code{
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public List<object> items { get; set; } = new List<object>();

    KeyValuePair<string, bool> key = new KeyValuePair<string, bool>(key: "", value: false);


    string getDescription(PropertyInfo property)
    {
        var description = property.GetCustomAttributes(typeof(DisplayAttribute), true).Cast<DisplayAttribute>
            ().SingleOrDefault();
        return description != null ? description.Name : property.Name;
    }

    void orderBy(string parameter)
    {
        if (key.Key == parameter & key.Value)
        {
            items = items.OrderByDescending(p => p.GetType().GetProperty(parameter).GetValue(p)).ToList();
            key = new KeyValuePair<string, bool>
                (key: parameter, value: false);
        }
        else
        {
            items = items.OrderBy(p => p.GetType().GetProperty(parameter).GetValue(p)).ToList();
            key = new KeyValuePair<string, bool>
                (key: parameter, value: true);
        }
    }
}